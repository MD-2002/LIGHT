

In the html		 <img src="/textures/saflag.png" id="flag" style = "display:none;"></img>
let image = document.getElementById("flag");  
You can also do the above by let image = new Image(); image.src = "/textures/saflag.png";  be aware that your program will run before the image is loaded, which can be a problem the 1st time (before the image is cached by your browser),solve this problem when you get there

 var texCoordBuffer = gl.createBuffer(); 
  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      0.0,  0.0, bottom left corner
      1.0,  0.0, bottom right corner
      0.0,  1.0, top left
      0.0,  1.0, top left
      1.0,  0.0, bottom right
      1.0,  1.0  top right
      ]), gl.STATIC_DRAW); // you are capable of doing the rest of the uv coordinates for the rest of THE FACES, if in doubt check my example on BB
  gl.enableVertexAttribArray(texCoordLocation);
  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

  generate mipmams {mipmaps are pre-calculated, optimized sequences of images, each of which is a progressively lower resolution representation of the same image. The height and width of each image, or level, in the mipmap is a power of two smaller than the previous level.}
 
var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Set the parameters so we can render any size image.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

  // Upload the image into the texture.
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

In the vertex shader
create an attribute vec2 a_texCoord
create a varying vec2 v_texCoord to pass a_texCoord to fragment shader
 in main   v_texCoord = a_texCoord

 In the fragment shader
 uniform sampler2D u_image; //this gets colours from the u_image
 in main then gl_FragColor =texture2D(u_image,v_texCoord) //pass the image colours and their coordinets


in the draw function 
webgl.bindTexture(webgl.TEXTURE_2D,texturebuffer);
webgl.activeTexture(webgl.TEXTURE0); 